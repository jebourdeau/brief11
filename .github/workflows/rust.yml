name: Rust CI

on:
  push:
    branches:
       - main
       - beta

permissions:
  contents: write

jobs:
  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: '^(main)$'
      prerelease-branches: '^(beta)$'
      
  build:
    runs-on: ubuntu-latest
    if: ${{ needs.get-version.outputs.will-release == 'true' }}   #construction si la nouvelle version a été release
    needs: 
      - get-version
    #runs-on: ${{matrix.os}}                                       mettre en multi OS
    #strategy:
     # matrix:
      #  os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout repository                                    
      uses: actions/checkout@v2

    - name: Set-up Rust                                            #set up de la variable avec une toolchain 
      uses: actions-rs/toolchain@v1.0.6
      with:    
        toolchain: stable
        target: wasm32-unknown-unknown
    #- name: trunk-action                                         importe les fichiers déjà compilé.
    #  uses: jetli/trunk-action@v0.5.0
        
    - name: dependencies                                           # creer les dépendances non compilé
      run: |
        cargo install trunk wasm-bindgen-cli

    - name: build 
      run: trunk build --release                                        

    - name: upload artifacts                                      # upldoad les artefacts vers la route "dist"
      uses: actions/upload-artifact@v4.4.3
      with: 
           name: rust
           path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [get-version, build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: rust
          path: dist

      - name: Create GitHub Release  
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
          GH_TOKEN: ${{ github.token }}
         
        run: |
          gh release create $VERSION dist/* --repo $REPO --target $COMMIT
      
    
  
